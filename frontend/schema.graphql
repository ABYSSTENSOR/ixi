type Query {
  users: [UserType]
  agents: [AgentType]
  tasks: [TaskType]
  taskLogMessages(taskId: ID!): [TaskLogMessageType]
  user(id: ID!): UserType
  agent(id: ID!): AgentType
  task(id: ID!): TaskType
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  taskSet: [TaskType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type TaskType {
  id: ID!
  name: String!
  user: UserType!
  goals: [GoalType]
  agent: AgentType!
  isComplete: Boolean!
  createdAt: DateTime!
  completeAt: DateTime
  tasklogmessageSet: [TaskLogMessageType!]!
}

type GoalType {
  description: String!
  complete: Boolean!
}

type AgentType {
  id: ID!
  name: String!
  purpose: String!
  taskSet: [TaskType!]!
  tasklogmessageSet: [TaskLogMessageType!]!
}

type TaskLogMessageType {
  id: ID!
  task: TaskType!
  agent: AgentType
  createdAt: DateTime!
  role: TaskLogTaskLogMessageRoleChoices!
  content: Content
}

enum TaskLogTaskLogMessageRoleChoices {
  """system"""
  SYSTEM

  """assistant"""
  ASSISTANT

  """user"""
  USER
}

union Content = AssistantContentType | FeedbackRequestContentType | FeedbackContentType | SystemContentType

type AssistantContentType {
  type: String!
  message: String!
}

type FeedbackRequestContentType {
  type: String!
  message: String!
}

type FeedbackContentType {
  type: String!
  authorized: Int
  feedback: String
}

type SystemContentType {
  type: String!
  message: String!
}

type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskResponse
  respondToTaskMsg(input: TaskLogResponseInput!): RespondToTaskLogMutation
}

type CreateTaskResponse {
  task: TaskType
}

input CreateTaskInput {
  name: String!
  goals: [GoalInput]!
}

input GoalInput {
  description: String!
}

type RespondToTaskLogMutation {
  taskLogMessage: TaskLogMessageType
  errors: [String]
}

input TaskLogResponseInput {
  id: String!
  response: String!
  isAuthorized: Boolean!
}